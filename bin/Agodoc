#!/usr/bin/env rc

. 9.rc
. $PLAN9/lib/acme.rc

fn event {
	# $1 - c1 origin of event
	# $2 - c2 type of action
	# $3 - q0 beginning of selection
	# $4 - q1 end of selection
	# $5 - eq0 beginning of expanded selection
	# $6 - eq1 end of expanded selection
	# $7 - flag
	# $8 - nr number of runes in $9
	# $9 - text
	# $10 - chorded argument
	# $11 - origin of chorded argument

	switch($1$2){
	case E*	# write to body or tag
	case F*	# generated by ourselves; ignore
	case K*	# type away we do not care
	case Mi	# mouse: text inserted in tag
	case MI	# mouse: text inserted in body
	case Md	# mouse: text deleted from tag
	case MD	# mouse: text deleted from body
	case Ml	# mouse: button 3 in tag
		winwriteevent $*
	case Mx MX	# button 2 in tag or body
		winwriteevent $*

	case ML	# button 3 in body
		{
			tag=`{winread tag | awk '{print $1}' }
			last=`{winread tag | awk '{print $1}' | sed 's/\// /g' | awk '{print $NR}'}
			godocwin $tag.$9/ $last.$9
		} &
	}
}

fn godocwin {
	newwindow
	
	winname $1 
	echo -n ':0' | winwrite tag
	q=`{echo $2 | sed 's/\./ /g'}
	
	switch($#*){
	case 1
		echo '
		Agodoc Usage:
		Pass as package.Function to Agodoc (Chord 2-1) to see its documentation
		' | winwrite body
	case 2
		godoc $q  >[2=1] | winwrite body
	}
	winctl clean
	wineventloop
}

switch($#*){
case 0
		godocwin /agodoc/godoc 
		
case *
	for(i) {
		godocwin /agodoc/$i  $i
	}
}

